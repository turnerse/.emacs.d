
This file contains my (Steve Turner's) custom elisp code for Centaur emacs.

This is a literate org file, that gets processed by org-babel-load-file

See also the (custom-set-variables ...) section of custom.el, which I modify
only through the (customize) interface.
#+BEGIN_SRC emacs-lisp 
  (princ (concat (format "Emacs version: %s\n" (emacs-version))
                 (format "org version: %s\n" (org-version))))
#+END_SRC    

Add some more keybindings for org-roam functions:
#+BEGIN_SRC emacs-lisp 
(use-package org-roam
             :ensure t
             :hook
             (after-init . org-roam-mode)
             :custom
             (org-roam-directory "~/org-roam")
             :bind (:map org-roam-mode-map
                         (("C-c n l" . org-roam)
                          ("C-c n f" . org-roam-find-file)
                          ("C-c n g" . org-roam-graph))
                         :map org-mode-map
                         (("C-c n i" . org-roam-insert))
                         (("C-c n I" . org-roam-insert-immediate))))

#+END_SRC    

Deft mode is used by a lot of note-takers. Is it useful? Maybe.
#+BEGIN_SRC emacs-lisp 
(use-package deft
  :ensure t
  :custom
  (deft-extensions '("org" "md" "txt"))
  (deft-directory "~/repos/GitLab/turners/org")
  (deft-use-filename-as-title t)
  (deft-recursive t))
#+END_SRC    

There are a great many keybindings that are actively hostile, in that they are
bound to useless or obsolete functions that are really easy to trigger
accidentally.
#+BEGIN_SRC emacs-lisp 
(unbind-key "C-z") ;; suspend-frame
#+END_SRC    
On the other hand, the Option key is unused, so I can bind it to 'super (in
custom.el) and use it as a prefix for my own private keybindings, like so:
#+BEGIN_SRC emacs-lisp 
;; (define-key projectile-mode-map (kbd "s-,") 'projectile-command-map)
;; (define-key projectile-mode-map [?\s-d] 'projectile-find-dir)
;; (define-key projectile-mode-map [?\s-p] 'projectile-switch-project)
;; (define-key projectile-mode-map [?\s-f] 'projectile-find-file)
;; (define-key projectile-mode-map [?\s-g] 'projectile-grep)
;; (define-key global-map [?\s-m] 'magit-status)
#+END_SRC    

Every Emacs window should, by default occupy all the screen space it can.
#+BEGIN_SRC emacs-lisp 
;;(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC    

I find it useful to have a slightly more apparent indicator of which buffer is
active at the moment.
#+BEGIN_SRC emacs-lisp 
(use-package dimmer
  :custom (dimmer-fraction 0.4)
  :config (dimmer-mode))
(dimmer-mode t)
(dimmer-configure-which-key) ;; don't dim the which-key minibuffer
(dimmer-configure-magit)
(dimmer-configure-org)
;; (dimmer-configure-company-box)
;; (dimmer-configure-helm)
;; (dimmer-configure-gnus)
(dimmer-configure-hydra)
(dimmer-configure-posframe)
#+END_SRC    

* Encryption with PGP

Enable some libraries:
#+begin_src emacs-lisp
  (require 'epa-file)
  (epa-file-enable)
  (require 'org-crypt)
#+end_src
Make sure that when a file is saved any entries that were decrypted are encrypted before the file hits your harddisk:
#+begin_src emacs-lisp
  (org-crypt-use-before-save-magic)
#+end_src
Ensure things don’t get confused if an encrypted item has children (you probably
don’t want to encrypt each child individually and then encrypt the parent):
#+begin_src emacs-lisp
  (setq org-tags-exclude-from-inheritance (quote ("crypt")))
#+end_src
We are just going to use a password to encrypt entries rather than a
public/private key pair:
#+begin_src emacs-lisp
  (setq org-crypt-key nil)
#+end_src
Fix EasyPG error.
From https://colinxy.github.io/software-installation/2016/09/24/emacs25-easypg-issue.html
#+begin_src emacs-lisp
  (defvar epa-pinentry-mode)
  (setq epa-pinentry-mode 'loopback)
#+end_src

Don't put "Centaur Emacs" in the title for each frame.
#+begin_example
(setq frame-title-format '("%b"))
#+end_example

Have to redefine org-capture-templates, because Centaur Emacs loads
lisp/init-org.el after custom.el and overwrites it!

#+begin_src emacs-lisp
  (setq org-capture-templates
        '(("i" "Idea" entry
           (file "/Users/steve/org//idea.org")
           "*  %^{Title} %?")
          ("t" "Todo" entry
           (file "/Users/steve/org//gtd.org")
           "* TODO %?")
          ("n" "Note" entry
           (file "/Users/steve/org//note.org")
           "* %? :NOTE:")
          ("j" "Journal" entry
           (file+olp+datetree "/Users/steve/org//journal.org")
           "*  %^{Title} %?")
          ("b" "Book" entry
           (file+olp+datetree "/Users/steve/org//book.org")
           "* Topic: %^{Description}  %^g %? Added: %U")))
#+end_src
